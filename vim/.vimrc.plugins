" set the runtime path to include Vundle and initialize 
"

filetype off

call plug#begin('~/.vim/plugged')
" alternatively, pass a path where Vundle should install plugins
" use PlugInstall to install these plugins
" and PlugClean to clean.
" install Plug.vim with
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Plug 'gmarik/Vundle.vim' " Required

" The colorschemes
Plug 'tomasr/molokai'
" Plug 'flazz/vim-colorschemes'


Plug 'scrooloose/nerdtree', {'on': 'NERDTreeFind'} " file browser
Plug 'Xuyuanp/nerdtree-git-plugin', {'on': 'NERDTreeFind'}
"Plug 'scrooloose/nerdcommenter' " Commenter
Plug 'tpope/vim-commentary'

Plug 'bling/vim-airline' "status bar
Plug 'scrooloose/syntastic' " Dat syntax highlighter
Plug 'tpope/vim-fugitive' " git integration

" easy motion, to train motions better.
" mapped to leader leader.
" Plug 'Lokaltog/vim-easymotion'

Plug 'edkolev/tmuxline.vim'


" use cs to change surrounding, ds to delete surrounding and ys to insert surrounding
Plug 'tpope/vim-surround' 
" repeat last command, . on steroids
Plug 'tpope/vim-repeat'

" enable readline bindings in vim (i.e. c-a to go to start of line in insert
" and command line mode, c-e end of line, c-f and c-b a letter forward and
" backward and m-f and m-b for a word worard and backward
Plug 'Tritlo/vim-rsi' " uses tritlo instead of tpope, due to M-n being same as ð key on icelandic keyboard

" supercharges the * command (search for word under cursor)
" Plug 'ironhouzi/vim-stim'

" Wakatime timetracking
Plug 'wakatime/vim-wakatime'

"" misc
Plug 'tinymode.vim' " continuous key presses
Plug 'rking/ag.vim', {'on':'Ag'} " better grep, search for term in project.


" filetype plugins
Plug 'wting/rust.vim', {'for': 'rust'}
Plug 'jnwhiteh/vim-golang', {'for' : 'go'}
Plug 'pangloss/vim-javascript', {'for' : 'javascript'}
Plug 'ekalinin/Dockerfile.vim'
Plug 'nginx.vim', {'for': 'nginx'}
Plug 'elzr/vim-json'
" Plug 'godlygeek/tabular' " for markdown
Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'nelstrom/vim-markdown-folding', {'for': 'markdown'}

" Plug 'jiangmiao/auto-pairs'

" Beautify
Plug 'maksimr/vim-jsbeautify', {'for': 'javascript'}
" JSX
Plug 'mxw/vim-jsx' ", {'for': 'javascript'}
Plug 'jaxbot/syntastic-react' ", {'for': 'javascript'}
" opencl.
" remember to create
" opencl.vim in ~/.vim/ftdetect/
" containing the command
" autocmd BufRead,BufNewFile *.cl set filetype=opencl
Plug 'petRUShka/vim-opencl', {'for': 'opencl'}

Plug 'kchmck/vim-coffee-script', {'for': 'coffee'}



" supervisor files and supervisor ctl
Plug 'thiderman/vim-supervisor' " also some functionality
" Plug 'vim-scripts/Tail-Bundle' " works for other tail files as well

Plug 'sjl/gundo.vim', {'on':'GundoToggle'}     " bound to <Leader>gu, displays the undo tree (so that i use it)
Plug 'edsono/vim-matchit' " better % matching, including html tags

" Plug 'SirVer/ultisnips' " inserts snippets
" Plug 'honza/vim-snippets' " lots of predefined snippets

Plug 'nathanaelkane/vim-indent-guides' " toggleable with <Leader>ig


" vimshell and deps.
" Plug 'Shougo/vimproc.vim'
" Plug 'Shougo/vimshell.vim' , {'on': 'VimShellCreate'}
" Plug 'Shougo/neocomplcache.vim'


" clojure
" Plug 'tpope/vim-dispatch', {'for':'clojure'}
" Plug 'tpope/vim-fireplace', {'for':'clojure'}
" Plug 'tpope/vim-leiningen', {'for':'clojure'}

" Latex

" Plug 'git://git.code.sf.net/p/vim-latex/vim-latex', {'for':'latex'}

" Plug 'vim-voom/VOoM' " outline viewer
" Plug 'vim-scripts/utl.vim' " better vim url handling
" emacs kill-ring in vim.
" use with meta-p to scroll through yank history.
" Does not work with the Icelandic key ð.
Plug 'maxbrunsfeld/vim-yankstack'

Plug 'lervag/vimtex'
" Thessi haegja a, viljum thad ekki i terminal
if has('gui_running')
    " these take longer to load

    "vim notes
    " Plug 'xolox/vim-shell'
    " Plug 'xolox/vim-misc'
    " Plug 'xolox/vim-notes'
    "
    " local vimrc, loads .lvimrc files in reverse order, and applies those 
    " settings. Like exrc, but hierarchical.
    Plug 'embear/vim-localvimrc'

    Plug 'klen/python-mode', {'for' : 'python'}
    " File finder
    Plug 'kien/ctrlp.vim'
    Plug 'tpope/vim-sleuth' " automatically detects indent settings

    "git gutter
    Plug 'airblade/vim-gitgutter'
    " vim-rooter is nice, but might be confusing
    " during command line editing
    Plug 'airblade/vim-rooter'
    " Ser medhondlun

    if has("unix")
        " unix only plugins go here
        " Code completion, tharf ad compile-a med cmake og libclang og e-d
        Plug 'Valloric/YouCompleteMe'
        " Tharf exuberant ctags
        Plug 'jeetsukumaran/vim-gazetteer'
        Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
    endif
endif
call plug#end()
" call vundle#end()            " required
filetype plugin indent on    " required




autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


command! OrgCapture :call org#CaptureBuffer()
command! OrgCaptureFile :call org#OpenCaptureFile()


if has("unix")
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif
    let g:airline#extensions#tabline#left_sep = '▶'
    let g:airline#extensions#tabline#left_alt_sep = '|'
    "let g:airline_left_sep = '»'
    let g:airline_left_sep = '▶'
    "let g:airline_right_sep = '«'
    let g:airline_right_sep = '◀'
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.whitespace = 'Ξ'
endif


" Have vim-rooter not echo the dir
let g:rooter_silent_chdir = 1

let g:wakatime_PythonBinary = '/usr/bin/python'


let g:pymode_rope_completion = 0
let g:pymode_lint_cwindow = 0
let g:pymode_lint_on_fly = 0
let g:pymode_lint_unmodified = 0
let g:pymode_folding = 0

let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'vimshell' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1,
      \ 'conque_term' : 1
      \}


let g:yankstack_map_keys = 0
let g:markdown_fold_style = 'nested'

"

let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_c_check_header = 1
let g:syntastic_always_populate_loc_list = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
let g:ycm_confirm_extra_conf = 0

let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup=1

let g:shell_mappings_enabled = 0

colorscheme molokai

if has('gui_running')
    let g:ctrlp_extensions = ['gazetteer']
    let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
    let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
    let g:ctrlp_gazetteer_ctags_bin = "ctags-exuberant"
    let g:ctrlp_gazetteer_types = {
        \   'javascript' :{
        \       'bin' : 'jsctags',
        \       'args' : '-f -',
        \   }
        \ }
endif


call tinymode#EnterMap("winsize","<C-W>+","+")
call tinymode#EnterMap("winsize","<C-W>-","-")
call tinymode#EnterMap("winsize","<Leader>w+","+")
call tinymode#EnterMap("winsize","<Leader>w-","-")
call tinymode#Map("winsize","+","wincmd +")
call tinymode#Map("winsize","-","wincmd -")
call tinymode#EnterMap("winsize","<C-W><","<")
call tinymode#EnterMap("winsize","<C-W>>",">")
call tinymode#EnterMap("winsize","<Leader>w<","<")
call tinymode#EnterMap("winsize","<Leader>w>",">")
call tinymode#Map("winsize","<","wincmd <")
call tinymode#Map("winsize",">","wincmd >")
call tinymode#ModeMsg("winsize","Change window size +/-, </>")

call tinymode#EnterMap("yankstack","<Leader>pj","j")
call tinymode#EnterMap("yankstack","<Leader>pk","k")
call tinymode#Map("yankstack","j","normal \<Plug>yankstack_substitute_newer_paste")
call tinymode#Map("yankstack","k","normal \<Plug>yankstack_substitute_older_paste")
call tinymode#ModeMsg("yankstack","Scroll through yankstack with j/k")



" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('sh', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('jsx', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('py', 'Magenta', 'none', '#ff00ff', '#151515')


" TmuxLine
let g:tmuxline_theme = 'airline'
let g:tmuxline_preset = 'powerline'
let g:tmuxline_powerline_separators = 0
let g:tmuxline_separators = {
            \'left_alt' : '>', 
            \'right_alt': '<',
            \'left' : '▶', 
            \'right': '◀',
            \'space': ' '}
